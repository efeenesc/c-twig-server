#include "../utils/hashmap.h"
#include "types/http_types.h"

#ifndef http_h
#define http_h

// Handles an HTTP request by parsing request headers and body, matching it with
// the requested path, and writing a response.
// `buffer` is a string the HTTP request is stored in, `response` is the
// response generated by this function (usually an error code) or another
// function that is executed due to its path being a match. `responseSize` is
// the size of the written response.
int handle_http(char buffer[], void **response,
                unsigned long long *responseSize);

// Matches a path that is equal to the `requestType` and `requestPath` it was
// given. If `requestType` is "GET", `requestPath` is searched in the "html"
// root folder. If `requestPath` is found, 0 is returned. If requestPath does
// not end with a file type (like .html), "index.html" is appended to the path,
// and eventually -1 is returned if found. If a path still is not found, 1 is
// returned.
// TODO: Add endpoint matching here.
int match_path(const char *requestType, const char *requestPath);

// Handles OPTIONS HTTP requests by looking at available resources.
// `response` is what the HTTP response is written to, `responseSize` is the
// written response's length, `headers` is a hashmap of the parsed request
// headers, and `toWrite` is an HttpResponse struct whose contents (code, type,
// content, content length) are serialized and written into the HTTP response.
int handle_options(void **response, unsigned long long *responseSize,
                   struct hashmap *headers, HttpResponse *toWrite);

int write_response(void **response, unsigned long long *responseSize,
                   struct hashmap *headers, HttpResponse *toWrite);

#endif